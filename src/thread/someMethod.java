package thread;

//Thread.sleep(1000);
//表示当前线程暂停1000毫秒 ，其他线程不受影响
//会抛出InterruptedException 中断异常，因为当前线程sleep的时候，有可能被停止，这时就会抛出 InterruptedException
//
//线程名.join();
//首先解释一下主线程的概念
//所有进程，至少会有一个线程即主线程，即main方法开始执行，就会有一个看不见的主线程存在。
//执行线程名.join，即表明在主线程中加入该线程。
//主线程会等待该线程结束完毕， 才会往下运行。
//
//t1.setPriority(Thread.MAX_PRIORITY);
//t2.setPriority(Thread.MIN_PRIORITY);
//当线程处于竞争关系的时候，优先级高的线程会有更大的几率获得CPU资源
//为了演示该效果，要把暂停时间去掉，多条线程各自会尽力去占有CPU资源
//线程1的优先级是MAX_PRIORITY，所以它争取到了更多的CPU资源执行代码
//
//Thread.yield();
//当前线程，临时暂停，使得其他线程可以有更多的机会占用CPU资源
//
//t1.setDaemon(true);
//守护线程的概念是： 当一个进程里，所有的线程都是守护线程的时候，结束当前进程。
//就好像一个公司有销售部，生产部这些和业务挂钩的部门。
//除此之外，还有后勤，行政等这些支持部门。
//如果一家公司销售部，生产部都解散了，那么只剩下后勤和行政，那么这家公司也可以解散了。
//守护线程就相当于那些支持部门，如果一个进程只剩下守护线程，那么进程就会自动结束。
//守护线程通常会被用来做日志，性能统计等工作。
